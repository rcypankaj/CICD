name: React Native CI/CD

on:
  push:
    branches: [main, master]
    paths-ignore:
      - "**.md"
      - LICENSE
      - docs/**
  pull_request:
    branches: [main, master]
  workflow_dispatch:
    inputs:
      buildType:
        type: choice
        description: Build type to run
        options: [prod-apk, all]

env:
  EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
  NODE_OPTIONS: "--openssl-legacy-provider --max_old_space_size=4096"
  FORCE_COLOR: 1

jobs:
  # Skip job if commit message contains [skip ci]
  check-skip:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    steps:
      - name: Skip CI check
        run: echo "Proceeding with workflow"

  # Test job - minimal and fast
  test:
    runs-on: ubuntu-latest
    needs: check-skip
    steps:
      - name: 🏗️ Checkout repository
        uses: actions/checkout@v4

      - name: 🧰 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.18.3"

      - name: 📦 Install dependencies
        run: |
          yarn install --frozen-lockfile
          yarn add --dev babel-plugin-module-resolver

      - name: 🧪 Run tests (if available)
        run: |
          if yarn run --json 2>/dev/null | grep -q '"test"'; then
            echo "Running tests..."
            yarn test
          else
            echo "No test script found, skipping tests"
          fi

  # Build and deploy job with safe caching after installation
  build-and-deploy:
    needs: [check-skip, test]
    if: >-
      ((github.event_name == 'push' && contains(fromJson('["refs/heads/main", "refs/heads/master"]'), github.ref)) ||
      github.event_name == 'workflow_dispatch')
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: 🏗️ Checkout repository
        uses: actions/checkout@v4

      - name: 🧰 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.18.3"

      - name: 📦 Get yarn cache directory
        id: yarn-cache-dir-path
        run: |
          yarn_cache_dir=$(yarn cache dir)
          echo "dir=$yarn_cache_dir" >> $GITHUB_OUTPUT
          echo "Yarn cache directory: $yarn_cache_dir"

      - name: 🗂️ Cache yarn cache (safe)
        uses: actions/cache@v4
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-cache-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-cache-

      - name: 📦 Install dependencies
        run: |
          echo "Installing project dependencies..."
          yarn install --frozen-lockfile --prefer-offline
          yarn add --dev babel-plugin-module-resolver
          echo "Dependencies installed successfully"

      - name: 🗂️ Cache node_modules (after installation)
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/yarn.lock', '**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: 🔧 Install EAS CLI
        run: |
          echo "Installing EAS CLI..."
          npm install -g eas-cli@latest
          eas --version

      - name: 🗂️ Cache EAS build directory (conditional)
        uses: actions/cache@v4
        with:
          path: ~/.eas-build-local
          key: ${{ runner.os }}-eas-build-${{ hashFiles('**/eas.json', '**/app.json') }}
          restore-keys: |
            ${{ runner.os }}-eas-build-
        continue-on-error: true

      - name: 🔍 Debug build environment
        run: |
          echo "=== Build Environment ==="
          echo "🔧 Node: $(node -v)"
          echo "📦 Yarn: $(yarn -v)" 
          echo "🏗️ EAS: $(eas --version)"
          echo ""
          echo "=== Project Structure ==="
          echo "📁 Root files:"
          ls -la *.json *.js *.ts 2>/dev/null || echo "No config files found"
          echo ""
          echo "📁 Components directory:"
          if [ -d "components" ]; then
            ls -la components/
          else
            echo "Components directory not found"
          fi
          echo ""
          echo "📁 App directory:"
          if [ -d "app" ]; then
            find app -name "*.tsx" -o -name "*.ts" | head -10
          else
            echo "App directory not found"
          fi

      - name: 🔐 Setup build credentials
        run: |
          echo "Setting up build credentials..."
          echo "${CREDENTIALS_JSON_BASE64}" | base64 -d > credentials.json
          echo "${KEYSTORE_BASE64}" | base64 -d > keystore.jks

          # Verify credentials were created
          if [ -f "credentials.json" ] && [ -f "keystore.jks" ]; then
            echo "✅ Credentials setup successful"
            ls -la credentials.json keystore.jks
          else
            echo "❌ Failed to setup credentials"
            exit 1
          fi
        env:
          CREDENTIALS_JSON_BASE64: ${{ secrets.CREDENTIALS_JSON_BASE64 }}
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}

      - name: 🛠️ Build Production APK
        if: >-
          github.event.inputs.buildType == 'all' ||
          github.event.inputs.buildType == 'prod-apk' ||
          github.event_name == 'push'
        run: |
          echo "🚀 Starting production APK build..."
          echo "Build started at: $(date)"

          # Clean any previous builds
          rm -f ./*.apk

          # Run the build
          eas build \
            --platform android \
            --profile production-apk \
            --local \
            --non-interactive \
            --output=./app-prod.apk \
            --clear-cache
            
          # Verify the build output
          if [ -f "./app-prod.apk" ]; then
            echo "✅ APK build completed successfully!"
            echo "📊 APK Details:"
            ls -lh ./app-prod.apk
            echo "Size: $(du -h ./app-prod.apk | cut -f1)"
            echo "Build completed at: $(date)"
          else
            echo "❌ APK build failed - output file not found!"
            echo "Checking for any APK files:"
            find . -name "*.apk" -type f 2>/dev/null || echo "No APK files found"
            exit 1
          fi
        env:
          NODE_ENV: production
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}

      - name: 📊 Build Summary
        if: success()
        run: |
          apk_size=$(du -h ./app-prod.apk | cut -f1)
          build_time=$(date '+%Y-%m-%d %H:%M:%S UTC')

          cat >> $GITHUB_STEP_SUMMARY << EOF
          ## 🎉 Build Completed Successfully

          ### 📱 APK Details
          - **File:** app-prod.apk
          - **Size:** $apk_size
          - **Built:** $build_time
          - **Commit:** \`${{ github.sha }}\`
          - **Branch:** \`${{ github.ref_name }}\`

          ### 🔗 Download
          The APK is available in the workflow artifacts below.

          ### 📋 Build Info
          - **Node.js:** $(node -v)
          - **Yarn:** $(yarn -v)
          - **EAS CLI:** $(eas --version)
          EOF

      - name: 📤 Upload APK Artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: production-apk-${{ github.run_number }}
          path: ./app-prod.apk
          retention-days: 30
          if-no-files-found: error

      - name: 🧹 Cleanup Sensitive Files
        if: always()
        run: |
          echo "Cleaning up sensitive files..."
          rm -f credentials.json keystore.jks
          echo "✅ Cleanup completed successfully"
